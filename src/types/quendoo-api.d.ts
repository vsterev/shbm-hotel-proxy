/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of defined property locations (e.g. cities, resorts, etc.) */
        get: operations["getLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the full list of properties */
        get: operations["getProperties"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/amenities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the full list of defined property/room amenities.
         * @description Amenity definitions are global for the system, property operators cannot define their own.
         *
         *     Amenities can be selected either for a property or for a room. They describe a particular quality
         *     that does not depend on the rate plan and is always true/available. Examples include:
         *     - Air conditioning
         *     - Airport distance - X km
         *     - Wi-Fi
         *
         *     In contrast, "Extra Services" are defined by each property operator,
         *     depend on the rate plan, and can be included in the price or sold separately.
         *     For details see [getProperties](#api-Default-getProperties).
         *
         */
        get: operations["getAmenities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for rooms for a particular period
         * @description This method returns only rate plans having `booking_types.search` = `true`, because only those can be
         *     used with the `postBooking` method.
         *
         */
        post: operations["searchDates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current status of booking. Requires either id or ref_id. */
        get: operations["getBookingByID"];
        put?: never;
        /**
         * Submit a booking
         * @description For this method, you can only use rate plans having `booking_types.search` = `true`.
         *     `searchDates` should only return rate plans that can be used with `postBooking`.
         *
         */
        post: operations["postBooking"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a booking (only safe fields are affected).
         * @description Based on `cancelBooking` with the following changes:
         *       `status` field remains unchanged;
         *       fields to be updated:
         *         `client` JSON
         *         `notes`
         *         "guests" array in `items` JSON
         *
         */
        patch: operations["updateBooking"];
        trace?: never;
    };
    "/booking/with-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a booking with agency prices.
         * @description Identical to `postBooking` except:
         *
         *     - `search_id` is not supported
         *     - the price is given as part of the booking item (properties `price` and `currency`)
         *     - each item also needs an `occupancy` object instead of `accommodation_id`
         *
         *     For this method, you can only use rate plans having `booking_types.fit` = `true`.
         *     `booking_types.search` does not matter.
         *
         */
        post: operations["postBookingWithPrice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/booking/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Cancel a booking. Requires either id or ref_id. */
        patch: operations["cancelBooking"];
        trace?: never;
    };
    "/booking/cancel-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Cancel a booking item. Requires either (id + item_id) or (booking_ref_id + item_ref_id). */
        patch: operations["cancelBookingItem"];
        trace?: never;
    };
    "/availabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAvailabilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rates-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRatesRestrictions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        propertyLocation: {
            id?: number;
            name?: string;
            /** @description Two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
             *     country code
             *      */
            country_code?: string;
        };
        amenityInfo: {
            id?: number;
            name?: string;
            /** @enum {string} */
            type?: "bool" | "enum" | "set";
            options?: {
                value?: number;
                text?: string;
            }[];
        };
        /** @description Amenities can be one of 3 types:
         *     - boolean: either available or not available; only available amenities are listed
         *     - enum: contains one of multiple string options in property `value` (e.g. Distance from airport: 30km)
         *     - set: contains an array of string options in property `set`
         *
         *     Use [getAmenities](#api-Default-getAmenities) to get the full list of amenity definitions.
         *      */
        amenityListItem: {
            id?: number;
            name?: string;
            /** @description Only exists for amenities of type enum */
            value?: string;
            /** @description Only exists for amenities of type set */
            set?: string[];
        };
        extraServiceInfoFull: {
            id?: number;
            name?: string;
            short_desc?: string;
            description?: string;
            image?: string;
            is_daily?: boolean;
            /**
             * @description Only relevant if is_daily is true. Controls for how many days can this service be booked.
             *     - `apply_0_0` - for every day
             *     - `apply_1_0` - exclude checkin date
             *     - `apply_0_1` - exclude checkout date
             *     - `apply_1_1` - exclude both checkin and checkout dates
             *
             * @enum {string}
             */
            days_applicable?: "apply_0_0" | "apply_1_0" | "apply_0_1" | "apply_1_1";
            /**
             * @description - `per_person` - Available for any guest, paid per person
             *     - `per_service` - Available for all guests as a group
             *     - `per_person_adult` - Only for adults, paid per person
             *     - `per_person_child_any` - For any non-adult, paid per person
             *     - `per_person_infant` - Only for children in the 'infant' group, paid per person
             *     - `per_person_child` - Only for children in the 'child' group, paid per person
             *     - `per_person_teen` - Only for children in the 'teen' group, paid per person
             *
             * @enum {string}
             */
            price_type?: "per_person" | "per_service" | "per_person_adult" | "per_person_child_any" | "per_person_infant" | "per_person_child" | "per_person_teen";
        };
        extraServiceInfoFullWithPrice: {
            id?: number;
            name?: string;
            short_desc?: string;
            description?: string;
            image?: string;
            is_daily?: boolean;
            /**
             * @description Only relevant if is_daily is true. Controls for how many days can this service be booked.
             *     - `apply_0_0` - for every day
             *     - `apply_1_0` - exclude checkin date
             *     - `apply_0_1` - exclude checkout date
             *     - `apply_1_1` - exclude both checkin and checkout dates
             *
             * @enum {string}
             */
            days_applicable?: "apply_0_0" | "apply_1_0" | "apply_0_1" | "apply_1_1";
            /**
             * @description - `per_person` - Available for any guest, paid per person
             *     - `per_service` - Available for all guests as a group
             *     - `per_person_adult` - Only for adults, paid per person
             *     - `per_person_child_any` - For any non-adult, paid per person
             *     - `per_person_infant` - Only for children in the 'infant' group, paid per person
             *     - `per_person_child` - Only for children in the 'child' group, paid per person
             *     - `per_person_teen` - Only for children in the 'teen' group, paid per person
             *
             * @enum {string}
             */
            price_type?: "per_person" | "per_service" | "per_person_adult" | "per_person_child_any" | "per_person_infant" | "per_person_child" | "per_person_teen";
            prices?: {
                /**
                 * Format: date
                 * @description Date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
                 */
                date?: string;
                price?: number;
            }[];
        };
        clientInfo: {
            first_name: string;
            last_name: string;
            /** Format: email */
            email: string;
            phone: string;
            nationality?: string;
            i_want_invoice?: boolean;
            booking_for_someone_else?: boolean;
            company?: {
                name?: string;
                address?: string;
                reg_no?: string;
                vat_no?: string;
                rp_name?: string;
            };
        };
        propertyInfo: {
            id?: number;
            name?: string;
            /** @description Hotel rating (number of stars) */
            star_rating?: number | null;
            /** Format: html */
            description?: string;
            /** @description Hotel, Villa, etc. This is a translated text description, values are subject to change. */
            type?: string;
            /** @enum {string} */
            property_group?: "multiple" | "single" | "single-studio" | "single-room";
            /** @description [ISO 4217 3-letter](https://en.wikipedia.org/wiki/ISO_4217) currency code */
            currency?: string;
            /**
             * @deprecated
             * @description DEPRECATED - please use `currency`
             */
            currency_code?: string;
            /** @description How many decimal places does the currency have */
            round_precision?: number;
            /**
             * @description - `instant` - accepted and can be paid instantly
             *     - `request` - needs to be approved by the property owner before it can be paid
             *
             * @enum {string}
             */
            booking_type?: "instant" | "request";
            max_guests_per_room?: number;
            children_policy?: {
                is_active?: boolean;
                max_children_age?: number;
                /** @description This is the hotel's policy on how to group non-adults into teens/children/infants
                 *     when making the reservation
                 *      */
                children_groups?: {
                    I?: components["schemas"]["childrenGroup"];
                    C?: components["schemas"]["childrenGroup"];
                    T?: components["schemas"]["childrenGroup"];
                };
            };
            /** @description Logo / Header image URL */
            header_image?: string;
            /**
             * @deprecated
             * @description Main image URL. DEPRECATED - please use `images`.
             */
            image?: string;
            /** @description Full list of image URLs */
            images?: string[];
            /** Format: HH:MM */
            checkin_time_from?: string;
            /** Format: HH:MM */
            checkin_time_to?: string;
            /** Format: HH:MM */
            checkout_time_from?: string;
            /** Format: HH:MM */
            checkout_time_to?: string;
            location_id?: number;
            amenities?: components["schemas"]["amenityListItem"][];
            /** @description List of all extra services defined for this property.
             *
             *     What services are available depends on the rate plan. Different rate plans may describe an extra service
             *     as "included" or "sold separately". Examples include:
             *     - Airport transfer
             *     - Baby cot
             *     - SPA package
             *      */
            extra_services?: components["schemas"]["extraServiceInfoFull"][];
            address?: {
                country_code?: string;
                country_name?: string;
                area?: string;
                location?: string;
                zip?: string;
                address_lines?: string[];
            };
            gps?: {
                lat?: number;
                lng?: number;
            };
            contacts?: {
                website_url?: string;
                facebook_url?: string;
                email?: string;
                phones?: string[];
            };
        };
        bookingInput: {
            search_id: string;
            /** @description Property ID */
            property: number;
            /** @description Optional ID for the booking in your system. Used to prevent duplicate bookings from being inserted.
             *     Must be unique for the agency account.
             *      */
            ref_id?: string;
            /**
             * Format: Unix timestamp
             * @description Booking created unix timestamp
             */
            booking_timestamp?: number;
            /**
             * Format: date
             * @description Check-in date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkin_date: string;
            /**
             * Format: date
             * @description Check-out date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkout_date: string;
            client: components["schemas"]["clientInfo"];
            notes?: string;
            items: components["schemas"]["bookingInputItem"][];
        };
        /** @description None of the properties on this level are required */
        bookingUpdate: {
            client?: components["schemas"]["clientInfo"];
            notes?: string;
            /** @description List of booking items to be updated. You can include only the items you want to update, it's
             *     not necessary to include all items from the booking.
             *      */
            items?: components["schemas"]["bookingInputItemGuestsOnly"][];
        };
        bookingInputWithPrice: {
            /** @description Property ID */
            property: number;
            /** @description Optional ID for the booking in your system. Used to prevent duplicate bookings from being inserted.
             *     Must be unique for the agency account.
             *      */
            ref_id?: string;
            /**
             * Format: Unix timestamp
             * @description Booking created unix timestamp
             */
            booking_timestamp?: number;
            /**
             * Format: date
             * @description Check-in date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkin_date: string;
            /**
             * Format: date
             * @description Check-out date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkout_date: string;
            client: components["schemas"]["clientInfo"];
            notes?: string;
            items: components["schemas"]["bookingInputItemWithPrice"][];
        };
        /** @description NOTE: `guests` should be considered soft-required - it's not explicitly required at the moment (for backwards
         *     compatibility), but should be implemented and will become required soon.
         *      */
        bookingInputItem: {
            /** @description Optional ID for the booking item in your system. Used to prevent duplicate booking items from being inserted.
             *     Must be unique for the agency account.
             *      */
            ref_id?: string;
            /** @description Room ID */
            room: number;
            /** @description Rate ID */
            rate: number;
            accommodation_id: string;
            extra_services?: {
                id: number;
                qty: number;
            }[];
            beds_preferences?: components["schemas"]["bedPreference"][];
            /** @description List of guests with names and ages */
            guests?: components["schemas"]["guestInfo"][];
        };
        /** @description Either id or ref_id is required to match an existing booking item.
         *      */
        bookingInputItemGuestsOnly: {
            /** @description ID for the booking item in Quendoo. */
            id?: number;
            /** @description ID for the booking item in your system. */
            ref_id?: string;
            /** @description List of guests with names and ages */
            guests?: components["schemas"]["guestInfo"][];
        };
        bookingInputItemWithPrice: {
            /** @description Optional ID for the booking item in your system. Used to prevent duplicate booking items from being inserted.
             *     Must be unique for the agency account.
             *      */
            ref_id?: string;
            /** @description Room ID */
            room: number;
            /** @description Rate ID */
            rate: number;
            occupancy: components["schemas"]["occupancyItem"];
            extra_services?: {
                id: number;
                qty: number;
            }[];
            beds_preferences?: components["schemas"]["bedPreference"][];
            /** @description List of guests with names and ages */
            guests: components["schemas"]["guestInfo"][];
            price: number;
            /** @description [ISO 4217 3-letter](https://en.wikipedia.org/wiki/ISO_4217) currency code. Used for confirmation,
             *     must match `property.currency`.
             *      */
            currency: string;
        };
        booking: {
            id?: number;
            /** @description ID for the booking in your system. Used to prevent duplicate bookings from being inserted.
             *     Unique for the agency account.
             *      */
            ref_id?: string;
            /** @description Unix timestamp */
            created_timestamp?: number;
            /** @description Unix timestamp */
            booking_timestamp?: number;
            /**
             * Format: date
             * @description Check-in date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkin_date?: string;
            /**
             * Format: date
             * @description Check-out date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkout_date?: string;
            /**
             * @description Reservation status. One of:
             *     - `REQUESTED` - If the property is configured to require booking confirmation, this will be the first status.
             *     Next will be either `APPROVED` or `CANCELLED`.
             *     - `CREATED` - If no confirmation is required, this will be the first status.
             *     - `APPROVED` - The booking was confirmed by the hotel.
             *     - `CHECKIN` - Guests have checked in.
             *     - `CHECKOUT` - Guests have checked out. No more status changes are expected.
             *     - `CANCELLED` - Booking is cancelled. No more status changes are expected.
             *
             * @enum {string}
             */
            booking_status?: "REQUESTED" | "CREATED" | "APPROVED" | "CHECKIN" | "CHECKOUT" | "CANCELLED";
            /** @enum {string} */
            payment_status?: "WAITING" | "FAILED" | "DEPOSIT_PAID" | "PARTIALLY_PAID" | "FULLY_PAID" | "REFUNDED";
            total_amount?: number;
            /** @description [ISO 4217 3-letter](https://en.wikipedia.org/wiki/ISO_4217) currency code */
            currency?: string;
            notes?: string;
            property?: components["schemas"]["propertyInfo"];
            client?: components["schemas"]["clientInfo"];
            items?: components["schemas"]["bookingItem"][];
            /** @description SUBJECT TO CHANGE */
            payment_plan?: {
                /** @description Payment indices for a booking start from 1 and go up. You can't make a payment for index 2 before index 1. */
                index?: number;
                amount?: number;
                /** @description [ISO 4217 3-letter](https://en.wikipedia.org/wiki/ISO_4217) currency code */
                currency?: string;
                /** Format: date */
                due_date?: string;
                payment_methods?: components["schemas"]["paymentMethodInfo"][];
                is_paid?: boolean;
                /** @description Unix timestamp */
                payment_timestamp?: number;
            }[];
        };
        bookingItem: {
            id?: number;
            /** @description ID for the booking item in your system. Used to prevent duplicate booking items from being inserted.
             *     Unique for the agency account.
             *      */
            ref_id?: string;
            room?: components["schemas"]["roomInfo"];
            rate?: components["schemas"]["roomRateInfo"];
            extra_services_included?: {
                name?: string;
                short_desc?: string;
            }[];
            beds_preferences?: components["schemas"]["bedPreference"][];
            /** @description List of guests with names and ages */
            guests?: components["schemas"]["guestInfo"][];
        };
        bedPreference: {
            /** @description Must refer to a bed with type = `special_bed` */
            id: string;
            /**
             * @description `single_bed` means 2 single beds
             * @enum {string}
             */
            type: "single_bed" | "double_bed";
        };
        guestInfo: {
            first_name: string;
            last_name: string;
            adult: boolean;
            /** @description required if `adult` is false */
            non_adult_age?: number;
        };
        searchDatesInput: {
            /**
             * @description [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/ISO_639-1)
             *     for translated resources
             *
             * @enum {string}
             */
            locale: "en" | "bg" | "el" | "de" | "ro" | "ru" | "pl";
            /**
             * Format: date
             * @description Check-in date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkin_date: string;
            /**
             * Format: date
             * @description Check-out date in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)
             */
            checkout_date: string;
            /** @description One item for each group of occupants that requires their own room. */
            occupancy: components["schemas"]["occupancyItem"][];
            /** @description Optional - list of location IDs to restrict the search to. */
            locations?: number[];
            /** @description Optional - list of property IDs to restrict the search to. */
            properties?: number[];
            /** @description Optional - list of countries to restrict the search to. */
            country_codes?: string[];
        };
        searchDatesResult: {
            /** @description Unique ID for this search. Use it when creating a booking.
             *     Expires after 10 minutes (see property `expires`)
             *      */
            id?: string;
            /** @description Unix timestamp, the search ID will not be valid after this moment */
            expires?: number;
            properties?: components["schemas"]["propertyInfoDeep"][];
        };
        childrenGroup: {
            /**
             * @description T: Teenager, C: Child, I: Infant
             * @enum {string}
             */
            code?: "T" | "C" | "I";
            from_age?: number;
            to_age?: number;
            label?: string;
        };
        bedroomInfo: {
            index?: number;
            name?: string;
            bed_types?: {
                index?: number;
                /** @description Only for type `special_bed`.
                 *     Use this ID when making the reservation to specify whether a `special_bed`
                 *     should be 2 singles or 1 double.
                 *      */
                id?: string;
                /**
                 * @description `special_bed` can be requested as either one double bed or two single beds
                 *
                 * @enum {string}
                 */
                type?: "single_bed" | "double_bed" | "special_bed" | "bunk_bed" | "sofa" | "sofa_bed" | "armchair_bed";
                name?: string;
                qty?: number;
            }[];
        };
        propertyInfoDeep: {
            property?: components["schemas"]["propertyInfo"];
            rooms?: components["schemas"]["roomInfoDeep"][];
        };
        roomInfo: {
            id?: number;
            name?: string;
            description?: string;
            /** @description Apartment, Villa, Room, etc. This is a translated text description, values are subject to change. */
            type?: string;
            /** @description Square meters, zero if unknown. */
            area?: number;
            /**
             * @deprecated
             * @description Main image URL. DEPRECATED - please use `images`.
             */
            image?: string;
            /** @description Full list of image URLs */
            images?: string[];
            amenities?: components["schemas"]["amenityListItem"][];
            /** @description Number of rooms. Static, doesn't change with availability.
             *      */
            qty?: number;
            acm_settings?: components["schemas"]["acmSettings"];
            bedrooms?: components["schemas"]["bedroomInfo"][];
        };
        roomInfoDeep: {
            room?: components["schemas"]["roomInfo"];
            sell_qty?: number;
            rates?: components["schemas"]["roomRateInfoDeep"][];
        };
        roomRateInfo: {
            id?: number;
            name?: string;
            description?: string;
            booking_types?: components["schemas"]["planBookingType"];
            agency_info?: components["schemas"]["planAgencyInfo"];
            /**
             * @deprecated
             * @description DEPRECATED - please use `sell_type`
             */
            per_room?: boolean;
            sell_type?: components["schemas"]["roomRateSellType"];
            /**
             * @description - `BO` - Bed only
             *     - `BB` - Bed and Breakfast
             *     - `HB` - Half board
             *     - `FB` - Full board
             *     - `AI` - All inclusive
             *     - `UAI` - Ultra all inclusive
             *
             * @enum {string}
             */
            meal_plan_code?: "BO" | "BB" | "HB" | "FB" | "AI" | "UAI";
            meal_plan_name?: string;
            payment_policy?: {
                /** @description Text description of the payment policy */
                description?: string;
                payments?: {
                    /** @enum {string} */
                    pay_type?: "on_res" | "af_res" | "on_arr" | "be_arr" | "on_dep" | "be_dat";
                    num_days?: number;
                    /** Format: date */
                    date?: string;
                    /** @enum {string} */
                    amount_type?: "total_price" | "first_night" | "percent_from_total_price" | "percent_from_first_night" | "fixed" | "remaining" | "free";
                    amount_value?: number;
                }[];
            };
            cancellation_policy?: {
                name?: string;
                short_desc?: string;
                description?: string;
                items?: components["schemas"]["cancellationPolicyItem"][];
            };
            /** @description List of all extra services that are included in this rate plan */
            extra_services_included?: {
                id?: number;
                name?: string;
                short_desc?: string;
                description?: string;
                image?: string;
            }[];
            /** @description List of extra services that are sold separately */
            extra_services_available?: components["schemas"]["extraServiceInfoFull"][];
        };
        roomRateInfoDeep: {
            rate?: {
                id?: number;
                name?: string;
                description?: string;
                booking_types?: components["schemas"]["planBookingType"];
                agency_info?: components["schemas"]["planAgencyInfo"];
                /**
                 * @deprecated
                 * @description DEPRECATED - please use `sell_type`
                 */
                per_room?: boolean;
                sell_type?: components["schemas"]["roomRateSellType"];
                /**
                 * @description - `BO` - Bed only
                 *     - `BB` - Bed and Breakfast
                 *     - `HB` - Half board
                 *     - `FB` - Full board
                 *     - `AI` - All inclusive
                 *     - `UAI` - Ultra all inclusive
                 *
                 * @enum {string}
                 */
                meal_plan_code?: "BO" | "BB" | "HB" | "FB" | "AI" | "UAI";
                meal_plan_name?: string;
                payment_policy?: {
                    /** @description Text description of the payment policy */
                    description?: string;
                    payments?: {
                        /** @enum {string} */
                        pay_type?: "on_res" | "af_res" | "on_arr" | "be_arr" | "on_dep" | "be_dat";
                        num_days?: number;
                        /** Format: date */
                        date?: string;
                        /** @enum {string} */
                        amount_type?: "total_price" | "first_night" | "percent_from_total_price" | "percent_from_first_night" | "fixed" | "remaining" | "free";
                        amount_value?: number;
                    }[];
                };
                cancellation_policy?: {
                    name?: string;
                    short_desc?: string;
                    description?: string;
                    items?: components["schemas"]["cancellationPolicyItem"][];
                };
                /** @description List of all extra services that are included in this rate plan */
                extra_services_included?: {
                    id?: number;
                    name?: string;
                    short_desc?: string;
                    description?: string;
                    image?: string;
                }[];
                /** @description List of extra services that are sold separately, with prices for each day */
                extra_services_available?: components["schemas"]["extraServiceInfoFullWithPrice"][];
            };
            /** @description List of accommodation variants */
            prices?: {
                /** @description ID of the accommodation variant. Need to be specified when creating the booking. */
                id?: string;
                /** @description Human readable description of the accommodation variant */
                description?: string;
                price?: number;
                discount_percent?: number;
                old_price?: number;
                /** @description Maximum quantity available for reservation */
                availability?: number;
            }[];
        };
        paymentMethodInfo: {
            id?: number;
            name?: string;
            description?: string;
            /**
             * @description Payment type can be one of:
             *     - `bank` - Bank transfer
             *     - `online` - Online payment with credit card
             *     - `pay_at_property` - In person at/after checkin
             *
             * @enum {string}
             */
            type?: "bank" | "online" | "pay_at_property";
            currencies?: string[];
            /** @description Only for type `bank` */
            bank_info?: {
                bank_name?: string;
                iban?: string;
                swift_bic?: string;
                bank_address?: string;
                beneficiary?: string;
                beneficiary_address?: string;
                description?: string;
            };
            /** @description Only for type `online` */
            payment_url?: string;
        };
        /** @description All fields are optional and exist only if the restriction is applicable */
        bookingRestriction: {
            /** @description Minimum length of stay through */
            min_los?: number;
            /** @description Maximum length of stay through */
            max_los?: number;
            /** @description Minimum length of stay upon arrival */
            min_los_arrival?: number;
            /** @description Maximum length of stay upon arrival */
            max_los_arrival?: number;
            /** @description Fixed length of stay */
            exact_stay?: number;
            /** @description No check-in on the chosen dates */
            no_arrival?: boolean;
            /** @description No check-out on the chosen dates */
            no_departure?: boolean;
            /** @description Minimum days to book before arrival */
            min_abo?: number;
            /** @description Maximum days to book before arrival */
            max_abo?: number;
        };
        acmSettings: {
            regular_beds?: {
                qty?: number;
                codes?: ("A" | "T" | "C" | "I")[];
            };
            /** @description Extra beds for adults and children */
            extra_beds?: {
                qty?: number;
                codes?: ("A" | "T" | "C" | "I")[];
            };
            /** @description Extra beds for children ONLY */
            extra_beds_children_only?: {
                qty?: number;
                codes?: ("T" | "C" | "I")[];
            };
            /** @description Children not using a bed */
            no_beds?: {
                qty?: number;
                codes?: ("T" | "C" | "I")[];
            };
        };
        cancellationPolicyItem: {
            /**
             * @description Cancellation type
             *     - `ct_ar`: After reservation
             *     - `ct_ar_days`: X-Y days after reservation
             *     - `ct_bc_days`: X-Y days before checkin
             *     - `ct_ns`: No show
             *     - `be_date`: Before specific date
             *     - `af_date`: After specific date
             *     - `ct_xy_days_ap1`: X-Y days after first payment
             *     - `ct_xy_days_ap2`: X-Y days after second payment
             *
             * @enum {string}
             */
            c_type?: "ct_ar" | "ct_ar_days" | "ct_bc_days" | "ct_ns" | "be_date" | "af_date" | "ct_xy_days_ap1" | "ct_xy_days_ap2";
            /** @description For `ct_ar_days` and `ct_bc_days` and `ct_xy_days_ap1` and `ct_xy_days_ap2` */
            p_days_from?: number;
            /** @description For `ct_ar_days` and `ct_bc_days` and `ct_xy_days_ap1` and `ct_xy_days_ap2` */
            p_days_to?: number;
            /**
             * Format: date
             * @description For `be_date` and `af_date`
             */
            p_date?: string;
            /**
             * @description Penalty type
             * @enum {string}
             */
            p_type?: "no_penalty" | "percent_from_total_price" | "number_of_nights" | "fixed_amount" | "total_paid_amount" | "payment1_amount" | "payment2_amount";
            /** @description Interpretation depends on p_type and is only available if not `no_penalty`
             *      */
            p_value?: number;
        };
        occupancyItem: {
            adults: number;
            /** @description One item for every child */
            children?: number[];
        };
        /** @description Describes which methods for posting a booking are supported for this rate plan */
        planBookingType: {
            /** @description Needs to be `true` for method `postBooking` */
            search?: boolean;
            /** @description Needs to be `true` for method `postBookingWithPrice` */
            fit?: boolean;
        };
        planAgencyInfo: {
            /** @enum {string} */
            commission_type?: "net" | "commission";
            /** @description If `commission_type` = `commission`, this is the commission percent */
            commission_percent?: number;
        };
        /**
         * @description Sell types
         *     - `per_room` - Per room
         *     - `per_person` - Per person
         *     - `per_occupancy` - Per occupancy
         *
         * @enum {string}
         */
        roomRateSellType: "per_room" | "per_person" | "per_occupancy";
    };
    responses: {
        /** @description Missing or invalid authentication token */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Invalid parameters */
        InvalidParameters: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    code?: number;
                    /** @description Human readable description of what exactly went wrong */
                    message?: string;
                }[];
            };
        };
        /** @description List of property locations */
        getLocations: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["propertyLocation"][];
            };
        };
        /** @description List of properties */
        getProperties: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    property?: components["schemas"]["propertyInfo"];
                    rooms?: {
                        room?: components["schemas"]["roomInfo"];
                        rates?: components["schemas"]["roomRateInfo"][];
                    }[];
                }[];
            };
        };
        /** @description List of amenity definitions */
        getAmenities: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["amenityInfo"][];
            };
        };
        /** @description Date search result */
        searchDates: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["searchDatesResult"];
            };
        };
        /** @description Booking info */
        getBooking: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["booking"];
            };
        };
        /** @description Booking info */
        postBooking: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["booking"];
            };
        };
        /** @description Booking info */
        updateBooking: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["booking"];
            };
        };
        /** @description Booking info */
        changeBookingStatus: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["booking"];
            };
        };
    };
    parameters: never;
    requestBodies: {
        searchDates: {
            content: {
                "application/json": components["schemas"]["searchDatesInput"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getLocations: {
        parameters: {
            query: {
                /** @description [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/ISO_639-1)
                 *     for translated resources
                 *
                 *     ** Enum: `en`, `bg`, `el`, `de`, `ro`, `ru`, `pl` **
                 *      */
                locale: "en" | "bg" | "el" | "de" | "ro" | "ru" | "pl";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["getLocations"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getProperties: {
        parameters: {
            query: {
                /** @description [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/ISO_639-1)
                 *     for translated resources
                 *
                 *     ** Enum: `en`, `bg`, `el`, `de`, `ro`, `ru`, `pl` **
                 *      */
                locale: "en" | "bg" | "el" | "de" | "ro" | "ru" | "pl";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["getProperties"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAmenities: {
        parameters: {
            query: {
                /** @description [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/ISO_639-1)
                 *     for translated resources
                 *
                 *     ** Enum: `en`, `bg`, `el`, `de`, `ro`, `ru`, `pl` **
                 *      */
                locale: "en" | "bg" | "el" | "de" | "ro" | "ru" | "pl";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["getAmenities"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    searchDates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["searchDates"];
        responses: {
            200: components["responses"]["searchDates"];
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getBookingByID: {
        parameters: {
            query?: {
                /** @description The ID of the booking */
                id?: number;
                /** @description The ref_id of the booking in your system */
                ref_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["getBooking"];
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    postBooking: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["bookingInput"];
            };
        };
        responses: {
            200: components["responses"]["postBooking"];
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    updateBooking: {
        parameters: {
            query?: {
                /** @description The ID of the booking */
                id?: number;
                /** @description The ref_id of the booking in your system */
                ref_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["bookingUpdate"];
            };
        };
        responses: {
            200: components["responses"]["postBooking"];
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    postBookingWithPrice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["bookingInputWithPrice"];
            };
        };
        responses: {
            200: components["responses"]["postBooking"];
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    cancelBooking: {
        parameters: {
            query?: {
                /** @description The ID of the booking */
                id?: number;
                /** @description The ref_id of the booking in your system */
                ref_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["changeBookingStatus"];
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    cancelBookingItem: {
        parameters: {
            query?: {
                /** @description The ID of the booking */
                id?: number;
                /** @description The ID of the booking item */
                item_id?: number;
                /** @description The ref_id of the booking in your system */
                ref_id?: string;
                /** @description The ref_id of the booking item in your system */
                item_ref_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["changeBookingStatus"];
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getAvailabilities: {
        parameters: {
            query: {
                /** @description [Two-letter ISO 639-1 language code](https://en.wikipedia.org/wiki/ISO_639-1)
                 *     for translated resources
                 *
                 *     ** Enum: `en`, `bg`, `el`, `de`, `ro`, `ru`, `pl` **
                 *      */
                locale: "en" | "bg" | "el" | "de" | "ro" | "ru" | "pl";
                date_from: string;
                date_to: string;
                /** @description Comma separated list of property IDs */
                properties?: string;
                /** @description Comma separated list of room IDs */
                rooms?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        property_id?: number;
                        name?: string;
                        rooms?: {
                            room_id?: number;
                            name?: string;
                            /** @description Guaranteed to contain all dates in the requested period */
                            dates?: {
                                /** Format: date */
                                date?: string;
                                qty?: number;
                            }[];
                        }[];
                    }[];
                };
            };
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getRatesRestrictions: {
        parameters: {
            query: {
                date_from: string;
                date_to: string;
                /** @description Comma separated list of property IDs */
                properties?: string;
                /** @description Comma separated list of room IDs */
                rooms?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        property_id?: number;
                        /** @description [ISO 4217 3-letter](https://en.wikipedia.org/wiki/ISO_4217) currency code */
                        currency?: string;
                        rooms?: {
                            room_id?: number;
                            rates?: {
                                rate_id?: number;
                                restrictions?: {
                                    /** Format: date */
                                    date?: string;
                                    restrictions?: components["schemas"]["bookingRestriction"];
                                }[];
                                accommodations?: {
                                    acm_id?: string;
                                    /** @enum {string} */
                                    person_code?: "A" | "T" | "C" | "I";
                                    /** @enum {string} */
                                    bed_code?: "RB" | "EB" | "NB";
                                    person_qty?: number;
                                    prices?: {
                                        /** Format: date */
                                        date: string;
                                        /** @description null if `is_opened = false` */
                                        price: number | null;
                                        /** @description if `false`, no booking can be made */
                                        is_opened: boolean;
                                        restrictions?: components["schemas"]["bookingRestriction"];
                                    }[];
                                }[];
                            }[];
                        }[];
                    }[];
                };
            };
            400: components["responses"]["InvalidParameters"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
}
